%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Camelot
%%For: (Gritsinevich Oleg) (None)
%%Title: (Untitled1 *)
%%CreationDate: (26/01/03) (04:15 PM)
%%BoundingBox:  129 678 527 806
%%AWColourTable
%%+h (Red) 0.0 100.0 100.0
%%+h (Orange-Red) 15.0 100.0 100.0
%%+h (Orange) 30.0 100.0 100.0
%%+h (Orange-Yellow) 45.0 100.0 100.0
%%+h (Yellow) 60.0 100.0 100.0
%%+h (Yellow-Chartreuse) 75.0 100.0 100.0
%%+h (Chartreuse) 90.0 100.0 100.0
%%+h (Chartreuse-Green) 105.0 100.0 100.0
%%+h (Green) 120.0 100.0 100.0
%%+h (Green-SpringGreen) 135.0 100.0 100.0
%%+h (Spring Green) 150.0 100.0 100.0
%%+h (SpringGreen-Cyan) 165.0 100.0 100.0
%%+h (Cyan) 180.0 100.0 100.0
%%+h (Sky Blue) 195.0 100.0 100.0
%%+h (Mid Blue) 210.0 100.0 100.0
%%+h (MidBlue-Blue) 225.0 100.0 100.0
%%+h (Blue) 240.0 100.0 100.0
%%+h (Blue-Indigo) 255.0 100.0 100.0
%%+h (Indigo) 270.0 100.0 100.0
%%+h (Violet) 285.0 100.0 100.0
%%+h (Magenta) 300.0 100.0 100.0
%%+h (Magenta-Crimson) 315.0 100.0 100.0
%%+h (Crimson) 330.0 100.0 100.0
%%+h (Crimson-Red) 345.0 100.0 100.0
%%+c (Black) 0.000 0.000 0.000 1.000
%%+t (90% Black) 90
%%+t (80% Black) 80
%%+t (70% Black) 70
%%+t (60% Black) 60
%%+t (50% Black) 50
%%+t (40% Black) 40
%%+t (30% Black) 30
%%+t (20% Black) 20
%%+t (10% Black) 10
%%+g (White) 1.000
%%+c (_550257772) 0.000 0.000 0.000 1.000
%%PrintControl 1
%%+WholeSpread 0
%%+Scale 100
%%+Orientation 0
%%+FitType 1
%%+TopMargin 0
%%+LeftMargin 0
%%+Width 595277
%%+Height 841891
%%+Rows 1
%%+Columns 1
%%+Gutter 0
%%+Layers 1
%%+PSLevel 1
%%+BitmapResMethod 0
%%+DotsPerInch 150
%%+Collated 0
%%+NumCopies 1
%%+PrintToFile 0
%%+ObjPrintRange 0
%%+DPSPrintRange 0
%%+AllTextAsShapes 0
%%EndComments
%%BeginProlog

%%BeginResource: procset XaraStudio1Dict
% Copyright (c) 1995,1996 Xara Ltd
/XaraStudio1Dict 300 dict def XaraStudio1Dict begin
/bd{bind def}bind def/ld{load def}bind def/xd{exch def}bind def/sv{save}bd
/rs{restore}bd/gs{gsave}bd/gr{grestore}bd/bg{begin}bd/en{end}bd/level2
/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/setseps{
/v_gseps xd}bd/setplate{/v_plate xd}bd/setkgray{/v_keyg xd}bd/setmono{
/v_mono xd}bd/rgb2gray{0.109 mul exch 0.586 mul add exch 0.305 mul
add}bd/cmyk2rgb{3{dup 5 -1 roll add dup 1 gt{pop 1}if 1 exch sub exch}repeat
pop}bd/rgb2cmyk{3{1.0 exch sub 3 1 roll}repeat 3 copy 2 copy gt{exch}if
pop 2 copy gt{exch}if pop dup 0.5 gt{0.5 sub dup 3{5 1 roll dup 3 1
roll sub}repeat 5 1 roll pop}{pop 0}ifelse}bd/cmyk2hsb{3{dup 5 -1 roll
add 1 exch sub dup 0 lt{pop 0}if exch}repeat pop rgb2hsb}bd/rgb2hsb{setrgbcolor
currenthsbcolor}bd/readcurve{exch 255.0 mul 0.5 add cvi get 255.0 div}bd
/rgb2devcmyk{3 copy dup 3 1 roll eq 3 1 roll eq v_keyg 1 eq and and{pop
pop 1 exch sub 0 0 0 4 -1 roll}{/ucurve where{pop 3{1.0 exch sub 3
1 roll}repeat 3 copy 2 copy gt{exch}if pop 2 copy gt{exch}if pop dup
ucurve readcurve exch bcurve readcurve clamp01 3{5 1 roll dup 3 1 roll
sub clamp01}repeat 5 1 roll pop 4 1 roll ycurve readcurve 4 1 roll
mcurve readcurve 4 1 roll ccurve readcurve 4 1 roll}{rgb2cmyk}ifelse}ifelse}def
/rgb2keyG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop}{Max3}ifelse
1 exch sub bcurve readcurve clamp01}bd/rgb2key{Max3 1 exch sub bcurve
readcurve clamp01}bd/rgb2cyanG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop
pop pop 0}{rgb2cyan}ifelse}bd/rgb2cyan{3 copy Max3 1 exch sub ucurve
readcurve 4 1 roll pop pop 1 exch sub exch sub ccurve readcurve clamp01}bd
/rgb2magentaG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2magenta}ifelse}bd
/rgb2magenta{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll pop
1 exch sub 3 1 roll pop sub mcurve readcurve clamp01}bd/rgb2yellowG{3
copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2yellow}ifelse}bd
/rgb2yellow{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll 1 exch
sub 4 1 roll pop pop sub ycurve readcurve clamp01}bd/rgb2plategray{v_keyg
0 eq v_plate v_cpky eq{{rgb2key}{rgb2keyG}ifelse}{v_plate v_cpyl eq{{rgb2yellow}{rgb2yellowG}ifelse}{v_plate
v_cpmg eq{{rgb2magenta}{rgb2magentaG}ifelse}{v_plate v_cpcy eq{{rgb2cyan}{rgb2cyanG}ifelse}{{rgb2key}{rgb2keyG}ifelse}ifelse}ifelse}ifelse}ifelse
1 exch sub setgray}bd/setplategray{v_plate v_cpky eq{1 exch sub setgray
pop pop pop}{v_plate v_cpyl eq{pop 1 exch sub setgray pop pop}{v_plate
v_cpmg eq{pop pop 1 exch sub setgray pop}{v_plate v_cpcy eq{pop pop
pop 1 exch sub setgray}{1 exch sub setgray pop pop pop}ifelse}ifelse}ifelse}ifelse}bd
/setplatecolor{v_plate v_cpky eq{1 exch sub 0 0 0 4 -1 roll setcmykcolor
pop pop pop}{v_plate v_cpyl eq{pop 1 exch sub 0 0 0 4 2 roll setcmykcolor
pop pop}{v_plate v_cpmg eq{pop pop 1 exch sub 0 0 0 4 1 roll setcmykcolor
pop}{v_plate v_cpcy eq{pop pop pop 1 exch sub 0 0 0 setcmykcolor}{1
exch sub 0 0 0 4 -1 roll setcmykcolor pop pop pop}ifelse}ifelse}ifelse}ifelse}bd
/setcmykcolor where{pop}{/setcmykcolor{cmyk2rgb setrgbcolor}bd}ifelse
/setlogcmykcolor{v_gseps 1 eq{v_mono 1 eq{1 exch sub setgray pop pop
pop}{setcmykcolor}ifelse}{v_mono 1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd
/setgfillcmyk{v_gseps 1 eq{v_mono 1 eq{cmyk2rgb rgb2plategray}{cmyk2rgb
rgb2devcmyk setplatecolor}ifelse}{v_mono 1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd
/setgfillrgb{v_gseps 1 eq{v_mono 1 eq{rgb2plategray}{rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{rgb2gray setgray}{systemdict begin setrgbcolor end}ifelse}ifelse}bd
/setgfillhsb{v_gseps 1 eq{v_mono 1 eq{systemdict begin sethsbcolor
currentrgbcolor end rgb2plategray}{systemdict begin sethsbcolor currentrgbcolor
end rgb2devcmyk setplatecolor}ifelse}{v_mono 1 eq{systemdict begin
sethsbcolor currentgray end setgray}{systemdict begin sethsbcolor end}ifelse}ifelse}bd
/Max{2 copy lt{exch}if pop}bd/Max3{2 copy lt{exch}if pop 2 copy lt{exch}if
pop}bd/Min{2 copy gt{exch}if pop}bd/Min3{2 copy gt{exch}if pop 2 copy
gt{exch}if pop}bd/clamp{3 1 roll Max 2 1 roll Min}bd/clamp01{0 Max
1 Min}bd/Pythag{dup mul exch dup mul add sqrt}bd/ssc{DeviceRGB setcolorspace
setcolor}bd/ssg{setgray}bd/p_render{}def/p_count 0 def/vis_flag true
def/dc{0 def}bd/aca{/v_cpnone 0 def/v_cpcy 1 def/v_cpyl 2 def/v_cpmg
3 def/v_cpky 4 def/v_gseps 0 def/v_keyg 0 def/v_plate v_cpnone def
/v_mono 0 def/v_wr dc/v_fc dc/v_fm dc/v_fy dc/v_fk dc/v_fg dc/v_sc
dc/v_sm dc/v_sy dc/v_sk dc/v_sg dc/v_ft 0 def/v_cxe 0 def/v_cxm 0 def
/v_sa -1 def/v_ea -1 def/sR dc/sG dc/sB dc/eR dc/eG dc/eB dc/sC dc
/sM dc/sY dc/sK dc/eC dc/eM dc/eY dc/eK dc/sH dc/sS dc/sB dc/eH dc
/eS dc/eB dc/ci_datasrc dc/ci_matrix dc/ci_dataleft dc/ci_buf dc/ci_dataofs
dc/ci_y dc/rciBuf dc/cbslw dc/cmiBuf dc/cPalette dc/cpci_datasrc dc
/cpci_matrix dc/cpci_bpp dc/cpci_y dc/cpci_sampsleft dc/cpci_nextcol
dc/cpci_buf dc/startX dc/startY dc/endX dc/endY dc/endX2 dc/endY2 dc
/fillX dc/urx dc/ury dc/llx dc/lly dc/incD dc/distance dc/slice dc
/startangle dc/Steps dc/incH dc/incS dc/incB dc/incR dc/incG dc/incB
dc 0.25 setlinewidth [] 0 setdash 0 setlinejoin 0 setlinecap}bd aca
/DataString 3 string def/DataSrc{currentfile DataString readhexstring
pop}bd/DataStr1 1 string def/DataStr2 1 string def/DataStr3 1 string
def/DataSrc1{DataStr1}bd/DataSrc2{DataStr2}bd/DataSrc3{DataStr3}bd
/colorimage where{pop/ci{colorimage}bd}{/ci{pop pop/ci_datasrc exch
def matrix invertmatrix/ci_matrix exch def pop/ci_dataleft 0 def/ci_buf()def
/ci_dataofs 0 def 0 1 3 -1 roll 1 sub{/ci_y exch def dup 0 1 3 -1
roll 1 sub{0 1 2{pop ci_dataleft 0 eq{ci_datasrc dup length/ci_dataleft
exch def/ci_buf exch def/ci_dataofs 0 def}if ci_buf ci_dataofs get
255 div/ci_dataofs ci_dataofs 1 add def/ci_dataleft ci_dataleft 1 sub
def}for setrgbcolor dup ci_y 3 -1 roll 1 add ci_y 1 add 4 copy 5 1
roll 4 2 roll 5 -1 roll 1 1 4{pop ci_matrix transform 8 2 roll}for
m l l l closepath fill}for}for pop}bd}ifelse/rci{/rciBuf 4 index 3
index mul 7 add 8 div floor cvi string def{currentfile rciBuf readhexstring
pop}bind false 3 ci}bd/cbsl{2 eq/cbslL2 xd 5 index/cbslw xd translate
scale 8 [ 3 index 0 0 5 index 0 0 ] cbslL2{/DataStr1 cbslw string def
currentfile/ASCII85Decode filter/RunLengthDecode filter DataStr1 readstring
pop pop/DataStr2 cbslw string def currentfile/ASCII85Decode filter
/RunLengthDecode filter DataStr2 readstring pop pop/DataStr3 cbslw
string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr3 readstring pop pop{DataStr1}bind{DataStr2}bind{DataStr3}bind
true}{/DataSrc load false}ifelse 3 ci}bd/gbsl{2 eq/gbslL2 xd 5 index
/gbslw xd translate scale 8 [ 3 index 0 0 5 index 0 0 ] gbslL2{/DataStr1
gbslw string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr1 readstring pop pop{DataStr1}bind}{/DataStr1 gbslw string def
currentfile DataSrc1 readhexstring pop pop{DataStr1}bind}ifelse image}bd
/cmi{/cmiBuf 4 index 3 index mul 7 add 8 div floor cvi string def{currentfile
cmiBuf readhexstring pop}bind image}bd/cpal{4 mul string/cPalette exch
def currentfile cPalette readhexstring pop}bd/cpci{/cpci_datasrc exch
def matrix invertmatrix/cpci_matrix exch def/cpci_bpp exch def cpci_init
0 1 3 -1 roll 1 sub{/cpci_y exch def dup cpci_bpp 4 eq{cpci_sampsleft
1 eq{/cpci_sampsleft 0 def}if}if 0 1 3 -1 roll 1 sub{cpci_nextcol dup
cpci_y 3 -1 roll 1 add cpci_y 1 add 4 copy 5 1 roll 4 2 roll 5 -1 roll
1 1 4{pop cpci_matrix transform 8 2 roll}for m l l l closepath fill}for}for
pop}bd/cpci_init{/cpci_sampsleft 0 def}bd/cpci_buf 1 string def/cpci_nextcol{cpci_bpp
1 eq{cpci_sampsleft 0 eq{currentfile cpci_buf readhexstring pop pop
/cpci_sampsleft 8 def}if cpci_buf dup 0 get dup 1 and setgray -1 bitshift
1 exch put/cpci_sampsleft cpci_sampsleft 1 sub def}{cpci_bpp 4 eq{cpci_sampsleft
0 eq{currentfile cpci_buf readhexstring pop pop/cpci_sampsleft 2 def}if
cpci_buf 0 get dup 15 and exch -4 bitshift cpci_buf 0 3 -1 roll put
/cpci_sampsleft cpci_sampsleft 1 sub def}{currentfile cpci_buf readhexstring
pop 0 get}ifelse 4 mul dup 2 add cPalette exch get 255 div exch dup
1 add cPalette exch get 255 div exch cPalette exch get 255 div setrgbcolor}ifelse}bd
/setup1asciiproc{[ currentfile mystring/readhexstring cvx/pop cvx
] cvx bind}bd/setup1binaryproc{[ currentfile mystring/readstring cvx
/pop cvx ] cvx bind}bd level2{save/dontloadlevel1 xd}if/iw 0 def/ih
0 def/im_save 0 def/setupimageproc 0 def/polarity 0 def/smoothflag
0 def/mystring 0 def/bpc 0 def/beginimage{/im_save save def dup 0 eq{pop
/setup1binaryproc}{1 eq{/setup1asciiproc}{(error, can't use level2 data acquisition procs for level1)print
flush}ifelse}ifelse/setupimageproc exch ld/polarity xd/smoothflag xd
/imat xd/mystring exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save
restore}bd/1bitbwcopyimage{1 setgray 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill 0 setgray iw ih polarity imat setupimageproc
imagemask}bd/1bitcopyimage{setrgbcolor 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill setrgbcolor iw ih polarity imat setupimageproc
imagemask}bd/1bitmaskimage{setrgbcolor iw ih polarity [iw 0 0 ih 0
0] setupimageproc imagemask}bd level2{dontloadlevel1 restore}if level2
not{save/dontloadlevel2 xd}if/setup2asciiproc{currentfile/ASCII85Decode
filter/RunLengthDecode filter}bd/setup2binaryproc{currentfile/RunLengthDecode
filter}bd/myimagedict 9 dict dup begin/ImageType 1 def/MultipleDataSource
false def end def/im_save 0 def/setupimageproc 0 def/polarity 0 def
/smoothflag 0 def/mystring 0 def/bpc 0 def/ih 0 def/iw 0 def/beginimage{
/im_save save def dup 2 eq{pop/setup2binaryproc}{dup 3 eq{pop/setup2asciiproc}{0
eq{/setup1binaryproc}{/setup1asciiproc}ifelse}ifelse}ifelse/setupimageproc
exch ld{[ 1 0 ]}{[ 0 1 ]}ifelse/polarity xd/smoothflag xd/imat xd/mystring
exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save restore}bd/1bitbwcopyimage{1
ssg 0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill
0 ssg myimagedict dup begin/Width iw def/Height ih def/Decode polarity
def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitcopyimage{ssc
0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitmaskimage{ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd level2 not{dontloadlevel2
restore}if
level2{save/dontloadlevel1 xd}if/startnoload{{/noload save def}if}bd
/endnoload{{noload restore}if}bd/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}bd
/ncolors 1 def/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin/processcolors where{pop pop processcolors}{/deviceinfo
where{pop deviceinfo/Colors known{pop{deviceinfo/Colors get}}if}if}ifelse
end def ncolors 0 ne{/colorimage testsystemdict/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if ncolors dup 1 ne exch dup 3
ne exch 4 ne and and{/ncolors 0 def}if ncolors 1 eq dup dup not startnoload{
/expandbw{expandfactor mul round cvi bwclut exch get 255 div}bd/doclutimage{bwclut
colorclut pop/bwclut xd bpc dup 8 eq{pop 255}{4 eq{15}{3}ifelse}ifelse
/expandfactor xd [/expandbw load/exec load dup currenttransfer exch
] cvx bind settransfer iw ih bpc imat setupimageproc image}bd}if not
endnoload ncolors dup 3 eq exch 4 eq or dup dup not startnoload{/nullproc{{}}def
/concatutil{/exec load 7 -1 roll/exec load}bd/defsubclut{1 add getinterval
def}bd/spconcattransfer{/Dclut exch def/Cclut exch def/Bclut exch def
/Aclut exch def/ncompute exch ld currentcolortransfer [{Aclut ncompute}concatutil
] cvx [{Bclut ncompute}concatutil ] cvx [{Cclut ncompute}concatutil
] cvx [{Dclut ncompute}concatutil ] cvx setcolortransfer}bd/setuprgbcluts{
/bit3x rgbclut length 3 sub def/bit1x bit3x 3 idiv def/rclut rgbclut
def/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}bd}if
not endnoload ncolors 3 eq dup dup not startnoload{/3compute{exch bit3x
mul round cvi get 255 div}bd/doclutimage{/rgbclut xd pop setuprgbcluts
/3compute rclut gclut bclut dup spconcattransfer iw ih bpc imat [
setupimageproc/exec load/dup load dup ] cvx nullproc nullproc true
3 colorimage}bd}if not endnoload ncolors 4 eq dup dup not startnoload{
/stuffclut{cmykindex 3 -1 roll put}bd/ftoint{1 exch sub 255 mul round
cvi}bd/4compute{exch bit4x mul round cvi get 255 div}bd/computecmykclut{setuprgbcluts
/bit4x rgbclut length 3 idiv 4 mul 4 sub def/cmykclut bit4x 4 add
string def/cclut cmykclut def/mclut cclut 1 bit4x defsubclut/yclut
cclut 2 bit4x defsubclut/kclut cclut 3 bit4x defsubclut/cmykindex 0
def 0 1 bit1x{dup/cmykindex exch bit1x exch sub 4 mul def 3 mul dup
rclut exch get 255 div exch dup gclut exch get 255 div exch bclut exch
get 255 div setrgbcolor currentcmykcolor ftoint kclut stuffclut ftoint
yclut stuffclut ftoint mclut stuffclut ftoint cclut stuffclut}for}bd
/doclutimage{/rgbclut xd pop invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer iw ih bpc imat
[ setupimageproc/exec load/dup load dup dup ] cvx nullproc nullproc
nullproc true 4 colorimage}bd}if not endnoload ncolors 0 eq dup dup
not startnoload{/lookupandstore{3 mul 3 getinterval putinterval exch
3 add exch 3 copy}bd/8lookup/lookupandstore ld/4lookup{/byte 1 index
def -4 bitshift lookupandstore byte 15 and lookupandstore}bd/2lookup{
/byte 1 index def -6 bitshift lookupandstore byte -4 bitshift 3 and
lookupandstore byte -2 bitshift 3 and lookupandstore byte 3 and lookupandstore}bd
/colorexpand{mystringexp 0 rgbclut 3 copy 7 -1 roll/mylookup load
forall pop pop pop pop pop}bd/createexpandstr{/mystringexp exch mystring
length mul string def}bd/doclutimage{/rgbclut xd pop/mylookup bpc 8
eq{3 createexpandstr/8lookup}{bpc 4 eq{6 createexpandstr/4lookup}{12
createexpandstr/2lookup}ifelse}ifelse ld iw ih bpc imat [ setupimageproc
/exec load/colorexpand load/exec load] cvx false 3 colorimage}bd}if
not endnoload/colorimage where{pop true}{false}ifelse dup{/do24image{iw
ih 8 imat setupimageproc false 3 colorimage}bd}if dup dup startnoload
not{/rgbtogray{/str xd/len str length def/smlen len 3 idiv def/rstr
str def/gstr str 1 len 1 sub getinterval def/bstr str 2 len 2 sub getinterval
def str dup 0 1 smlen 1 sub{dup 3 mul rstr 1 index get .3 mul gstr
2 index get .59 mul add bstr 3 -1 roll get .11 mul add round cvi put
dup}for pop 0 smlen getinterval}bd/do24image{iw ih 8 imat [ setupimageproc
/exec load/rgbtogray load/exec load ] cvx bind image}bd}if endnoload
/doimage{iw ih 8 imat setupimageproc image}bd level2{dontloadlevel1
restore}if level2 not{save/dontloadlevel2 xd}if/myappcolorspace/DeviceRGB
def/rgbclut 0 def/doclutimage{/rgbclut xd pop bpc dup 8 eq{pop 255}{4
eq{15}{3}ifelse}ifelse/hival xd [/Indexed myappcolorspace hival rgbclut]
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 hival] def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
bpc def/Interpolate smoothflag def end image}bd/do24image{myappcolorspace
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 1 0 1 0 1] def/ImageMatrix imat def/DataSource setupimageproc def
/BitsPerComponent 8 def/Interpolate smoothflag def end image}bd level2
not{dontloadlevel2 restore}if
/NumSteps{dtransform matrix defaultmatrix idtransform Pythag currentscreen
pop pop 72 exch div div}bd/FindMinSteps{v_ft 4 eq{urx startX sub abs
llx startX sub abs Max ury startY sub abs lly startY sub abs Max Pythag
2 3.14159265 mul mul 0}{v_ft 2 eq{endY startY sub endX startX sub Pythag
endY2 startY sub endX2 startX sub Pythag gt{endY startY sub endX startX
sub}{endY2 startY sub endX2 startX sub}ifelse}{endY startY sub endX
startX sub}ifelse}ifelse NumSteps}bd/cxe{/v_cxe exch def}bd/cxm{pop
/v_cxm exch def}bd/cxmt{pop pop}bd/cxt{pop}bd/S_eoclip{currentflat{{eoclip}stopped{dup
currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: eoclip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_clip{currentflat{{clip}stopped{dup currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: clip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_eofill{currentflat{{eofill}stopped{dup currentflat exch sub 20
gt{([Error: PathTooComplex; OffendingCommand: eofill]\n)print flush
exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/gpbbx{pathbbox/ury exch def/urx exch def/lly exch def/llx exch def}bd
/lineargfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def endY startY sub endX
startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx eG ssg newpath llx lly urx ury Bx S_eofill sG ssg newpath
llx lly 0 ury Bx S_eofill/fillX 0 def 0 1 Steps 1 sub{stepgfx newpath
fillX lly fillX incD add dup/fillX exch def ury Bx S_eofill pop}for}if}bd
/radialgfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def eG ssg newpath llx
lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepgfx newpath
startX startY distance 0 360 arc closepath distance incD add dup/distance
exch def 0 rmoveto startX startY distance 0 360 arc closepath S_eofill
pop}for}if}bd/ellipticgfill{initgfill{true initgfx sG ssg newpath llx
lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2 startX
sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepgfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for}if}bd/conicalgfill{initgfill{urx
startX sub abs llx startX sub abs Max ury startY sub abs lly startY
sub abs Max Pythag startY endY sub startX endX sub Pythag div/radius
exch def true initgfx [ endX startX sub endY startY sub startY endY
sub endX startX sub startX startY ] concat/slice 180 Steps div def
/startangle 0 def Steps -1 0{pop stepgfx 0 0 moveto 0 0 radius startangle
neg dup slice add arc fill 0 0 moveto 0 0 radius startangle dup slice
add dup/startangle exch def arc fill}for}if}bd/initgfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and sG eG eq or dup{sG ssg newpath llx
lly urx ury Bx S_eofill}if not}bd/initgfx{/flag exch def flag{sG eG
/sG exch def/eG exch def}if eG sG sub abs 256 mul FindMinSteps Min
256 Min ceiling 1 Max/Steps exch def eG sG sub Steps div/incG exch
def}bd/stepgfx{sG ssg/sG sG incG add def}bd/linearfill{initfill{false
initfx endX startX sub endY startY sub Pythag/distance exch def/incD
distance Steps div def endY startY sub endX startX sub atan newpath
llx lly urx ury Bx startX startY translate rotate gpbbx eC eM eY eK
setgfillcmyk newpath llx lly urx ury Bx S_eofill sC sM sY sK setgfillcmyk
newpath llx lly 0 ury Bx S_eofill/fillX 0 def 0 1 Steps 1 sub{stepfx
newpath fillX lly fillX incD add dup/fillX exch def ury Bx S_eofill
pop}for}if}bd/radialfill{initfill{false initfx endX startX sub endY
startY sub Pythag/distance exch def/incD distance Steps div def eC
eM eY eK setgfillcmyk newpath llx lly urx ury Bx S_eofill/distance
0 def 0 1 Steps 1 sub{stepfx newpath startX startY distance 0 360 arc
closepath distance incD add dup/distance exch def 0 rmoveto startX
startY distance 0 360 arc closepath S_eofill pop}for}if}bind def/ellipticalfill{initfill{true
initfx eC eM eY eK setgfillcmyk newpath llx lly urx ury Bx S_eofill
[ endX startX sub endY startY sub endX2 startX sub endY2 startY sub
startX startY ] concat Steps 1 sub -1 0{stepfx/i exch def 0 0 moveto
0 0 i Steps div 0 360 arc fill}for}if}bd/conicalfill{initfill{urx startX
sub abs llx startX sub abs Max ury startY sub abs lly startY sub abs
Max Pythag startY endY sub startX endX sub Pythag div/radius exch def
true initfx [ endX startX sub endY startY sub startY endY sub endX
startX sub startX startY ] concat/slice 180 Steps div def/startangle
0 def Steps -1 0{pop stepfx 0 0 moveto 0 0 radius startangle neg dup
slice add arc fill 0 0 moveto 0 0 radius startangle dup slice add dup
/startangle exch def arc fill}for}if}bd/initfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and v_cxe 2 ne sC eC eq sM eM eq and
sY eY eq and sK eK eq and and or dup{sC sM sY sK setgfillcmyk newpath
llx lly urx ury Bx S_eofill}if not}bd/initfx{/flag exch def v_cxe 0
eq{sC sM sY sK cmyk2rgb flag{/eB exch def/eG exch def/eR exch def}{
/sB exch def/sG exch def/sR exch def}ifelse eC eM eY eK cmyk2rgb flag{
/sB exch def/sG exch def/sR exch def}{/eB exch def/eG exch def/eR
exch def}ifelse eR sR sub abs 256 mul eG sG sub abs 256 mul Max eB
sB sub abs 256 mul Max FindMinSteps Min 256 Min ceiling 1 Max/Steps
exch def/incR eR sR sub Steps div def/incG eG sG sub Steps div def
/incB eB sB sub Steps div def}{sC sM sY sK cmyk2hsb/sB exch def/sS
exch def/sH exch def eC eM eY eK cmyk2hsb/eB exch def/eS exch def/eH
exch def eH sH sub abs v_cxe 1 eq{dup 0.5 gt{1 exch sub}if}{dup 0.5
lt{1 exch sub}if}ifelse 256 mul eS sS sub abs 256 mul Max eB sB sub
abs 256 mul Max FindMinSteps Min 256 Min ceiling 1 Max/Steps exch def
v_cxe 1 eq{/incH eH sH sub dup abs 0.5 gt{dup 0 ge{1 sub}{1 add}ifelse}if
Steps div def/incS eS sS sub Steps div def/incB eB sB sub Steps div
def}{/incH eH sH sub dup abs 0.5 lt{dup 0 ge{1 sub}{1 add}ifelse}if
Steps div def/incS eS sS sub Steps div def/incB eB sB sub Steps div
def}ifelse flag{/sH eH/eH sH def def/sS eS/eS sS def def/sB eB/eB sB
def def/incH incH neg def/incS incS neg def/incB incB neg def}if}ifelse}bd
/stepfx{v_cxe 0 eq{sR sG sB setgfillrgb sR incR add/sR exch def sG
incG add/sG exch def sB incB add/sB exch def}{sH sS sB setgfillhsb
sH incH add dup 0 le{1 add}{dup 1 ge{1 sub}if}ifelse/sH exch def sS
incS add/sS exch def sB incB add/sB exch def}ifelse}bd
/ar{}bd/arr{pop pop pop pop pop pop pop}bd/ae{pop pop pop pop pop
pop}bd/aoa{pop}bd/apl{pop}bd/apc{}bd/aof{pop pop}bd/aafs{pop pop pop}bd
/O{pop}bd/R{pop}bd/axop{pop pop pop pop}bd/g{/v_ft 0 def/v_fc 0 def
/v_fm 0 def/v_fy 0 def 1 exch sub/v_fk exch def}bd/G{/v_sc 0 def/v_sm
0 def/v_sy 0 def 1 exch sub/v_sk exch def}bd/k{/v_fk exch def/v_fy
exch def/v_fm exch def/v_fc exch def/v_ft 0 def}bd/K{/v_sk exch def
/v_sy exch def/v_sm exch def/v_sc exch def}bd/a_tc{exch pop 1 exch
sub dup 3 -1 roll exch div exch dup 4 -1 roll exch div 3 1 roll dup
5 -1 roll exch div 4 1 roll 5 -1 roll exch div 4 1 roll}bd/x{a_tc k}bd
/X{a_tc K}bd/awr{/v_wr exch def}bd/w{setlinewidth}bd/j{setlinejoin}bd
/J{setlinecap}bd/d{setdash}bd/asc{pop pop J}bd/aec{pop pop J}bd/csah{pop
pop pop}bd/ceah{pop pop pop}bd/cst{pop pop}bd/cdp{pop}bd/m{moveto}bd
/l{lineto}bd/c{curveto}bd/Bx{4 copy 5 1 roll 4 2 roll 5 -1 roll m
l l l closepath}bd/Cp{Bx clip newpath}bd/a_fp{gsave v_wr 0 ne v_ft
0 eq{v_fc v_fm v_fy v_fk setlogcmykcolor{eofill}{fill}ifelse}{v_ft
1 eq{linearfill}{v_ft 2 eq{ellipticalfill}{v_ft 3 eq{radialfill}{v_ft
4 eq{conicalfill}{v_ft 8 eq{lineargfill}{v_ft 9 eq{ellipticgfill}{v_ft
10 eq{radialgfill}{conicalgfill}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse
grestore}bd/*u{/p_count p_count 1 add def}bd/*U{/p_count p_count 1
sub def p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd/B{/p_render{a_fp
v_sc v_sm v_sy v_sk setlogcmykcolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/b{closepath B}bd/F{/p_render{a_fp newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/f{closepath F}bd/S{/p_render{v_sc v_sm v_sy v_sk setcmykcolor stroke}bd
p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd/s{closepath S}bd
/H{/p_render{newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/h{closepath H}bd/N{H}bd/n{h}bd/cag{dup 7 add/v_ft exch def dup 2
eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 8 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def/eG exch
def/sG exch def}bd/caz{dup/v_ft exch def dup 2 eq{pop/endY2 exch def
/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse/endY exch def/endX
exch def/startY exch def/startX exch def/eK exch def/eY exch def/eM
exch def/eC exch def/sK exch def/sY exch def/sM exch def/sC exch def}bd
/cax{dup/v_ft exch def dup 2 eq{pop/endY2 exch def/endX2 exch def}{7
eq{pop pop/v_ft 1 def}if}ifelse/endY exch def/endX exch def/startY
exch def/startX exch def a_tc 10 4 roll a_tc/sK exch def/sY exch def
/sM exch def/sC exch def/eK exch def/eY exch def/eM exch def/eC exch
def}bd/axm{/endY exch def/endX exch def/startY exch def/startX exch
def}bd/alyr{pop pop 1 eq{true}{false}ifelse/vis_flag exch def pop pop}bd
/t{moveto show}bd/ts{moveto false charpath S}bd/tf{moveto true charpath
F}bd/tb{3 copy moveto true charpath F moveto false charpath S}bd/selectfont
where{pop}{/selectfont{dup type/integertype eq{exch findfont exch scalefont
setfont}{exch findfont exch makefont setfont}ifelse}bd}ifelse/sf{selectfont}bd
/u{}bd/U{}bd/anu{pop}bd
end
%%EndResource
%%EndProlog
%%BeginSetup
save XaraStudio1Dict begin
%%EndSetup
end restore
save XaraStudio1Dict begin
0 cxe
2 0 cxm
1 awr
0.00 0.00 0.00 1.00 K
0.750 w
2 j
[ ] 0 d
0 J
0.00 0.00 0.00 0.00 k
195.303 740.763 m
195.303 791.403 l
154.360 791.403 l
154.360 740.763 l
195.303 740.763 l
b
0.250 w
0.00 0.00 0.00 1.00 k
172.349 779.012 m
172.349 786.338 l
173.319 786.338 l
173.319 782.705 l
176.957 786.338 l
178.271 786.338 l
175.198 783.369 l
178.406 779.012 l
177.127 779.012 l
174.518 782.720 l
173.319 781.550 l
173.319 779.012 l
172.349 779.012 l
f
0.750 w
195.303 766.083 m
205.539 766.083 l
215.774 766.083 l
S
0.00 0.00 0.00 0.00 k
256.178 740.763 m
256.178 791.403 l
215.774 791.403 l
215.774 740.763 l
256.178 740.763 l
b
231.936 786.554 m
231.936 776.318 l
S
231.936 776.318 m
242.172 781.167 l
S
231.936 786.554 m
242.172 781.167 l
S
210.387 776.318 m
228.704 794.096 l
S
0.00 0.00 0.00 1.00 k
226.549 795.174 m
230.858 796.790 l
229.781 792.480 l
226.549 795.174 l
f
195.303 705.207 m
200.152 705.207 l
205.539 705.207 l
205.539 766.083 l
S
256.178 766.083 m
266.414 766.083 l
276.650 766.083 l
S
0.00 0.00 0.00 0.00 k
317.592 740.763 m
317.592 791.403 l
276.650 791.403 l
276.650 740.763 l
317.592 740.763 l
b
292.811 786.554 m
292.811 776.318 l
S
292.811 776.318 m
303.047 781.167 l
S
292.811 786.554 m
303.047 781.167 l
S
271.801 776.318 m
289.579 794.096 l
S
0.00 0.00 0.00 1.00 k
287.963 795.174 m
292.272 796.790 l
290.656 792.480 l
287.963 795.174 l
f
317.592 766.083 m
327.828 766.083 l
338.064 766.083 l
S
0.00 0.00 0.00 0.00 k
378.468 740.763 m
378.468 791.403 l
338.064 791.403 l
338.064 740.763 l
378.468 740.763 l
b
354.225 786.554 m
354.225 776.318 l
S
354.225 776.318 m
364.461 781.167 l
S
354.225 786.554 m
364.461 781.167 l
S
332.676 776.318 m
350.454 794.096 l
S
0.00 0.00 0.00 1.00 k
348.838 795.174 m
353.148 796.790 l
351.532 792.480 l
348.838 795.174 l
f
139.276 766.083 m
154.360 766.083 l
S
139.276 705.207 m
154.360 705.207 l
S
0.00 0.00 0.00 0.00 k
195.303 679.349 m
195.303 730.527 l
154.360 730.527 l
154.360 679.349 l
195.303 679.349 l
b
164.596 725.140 m
164.596 715.443 l
S
164.596 715.443 m
174.832 720.292 l
S
164.596 725.140 m
174.832 720.292 l
S
0.250 w
0.00 0.00 0.00 1.00 k
179.184 717.060 m
178.284 717.060 l
178.284 722.792 l
178.068 722.585 177.784 722.379 177.432 722.172 c
177.080 721.965 176.765 721.810 176.485 721.707 c
176.485 722.577 l
176.988 722.813 177.428 723.100 177.804 723.436 c
178.181 723.773 178.447 724.099 178.604 724.416 c
179.184 724.416 l
179.184 717.060 l
f
0.750 w
0.00 0.00 0.00 0.00 k
500.757 740.763 m
500.757 791.403 l
459.814 791.403 l
459.814 740.763 l
500.757 740.763 l
b
0.250 w
0.00 0.00 0.00 1.00 k
470.050 778.887 m
472.173 786.463 l
472.893 786.463 l
470.774 778.887 l
470.050 778.887 l
f
475.017 778.887 m
472.894 786.463 l
473.618 786.463 l
475.737 778.887 l
475.017 778.887 l
f
477.054 778.854 m
479.736 788.424 l
480.646 788.424 l
477.969 778.854 l
477.054 778.854 l
f
*u
482.955 778.887 m
483.390 781.016 l
482.545 781.016 l
482.545 781.760 l
483.540 781.760 l
483.910 783.574 l
482.545 783.574 l
482.545 784.319 l
484.060 784.319 l
484.494 786.463 l
485.244 786.463 l
484.809 784.319 l
486.383 784.319 l
486.818 786.463 l
487.573 786.463 l
487.138 784.319 l
488.003 784.319 l
488.003 783.574 l
486.988 783.574 l
486.613 781.760 l
488.003 781.760 l
488.003 781.016 l
486.464 781.016 l
486.029 778.887 l
485.279 778.887 l
485.709 781.016 l
484.140 781.016 l
483.705 778.887 l
482.955 778.887 l
f
484.290 781.760 m
485.859 781.760 l
486.234 783.574 l
484.659 783.574 l
484.290 781.760 l
f
*U
0.750 w
398.939 786.554 m
439.882 786.554 l
S
439.882 786.554 m
439.882 745.611 l
398.939 745.611 l
398.939 786.554 l
S
398.939 745.611 m
439.882 786.554 l
S
401.094 776.318 m
401.094 777.396 l
402.171 777.935 l
402.710 778.473 l
403.787 779.551 l
404.865 779.551 l
405.404 780.089 l
406.481 780.089 l
407.558 780.089 l
408.636 780.089 l
409.175 779.551 l
409.713 779.012 l
410.791 777.935 l
411.329 777.396 l
411.868 776.318 l
412.407 775.780 l
413.484 774.702 l
414.562 773.625 l
416.717 773.086 l
418.333 772.547 l
419.949 772.547 l
421.565 773.086 l
423.181 774.164 l
424.259 776.318 l
S
419.410 755.847 m
434.494 755.847 l
S
419.410 740.763 m
424.259 745.611 l
419.410 750.999 l
S
0.00 0.00 0.00 0.00 k
378.468 740.763 m
378.468 791.403 l
338.064 791.403 l
338.064 740.763 l
378.468 740.763 l
b
354.225 786.554 m
354.225 776.318 l
S
354.225 776.318 m
364.461 781.167 l
S
354.225 786.554 m
364.461 781.167 l
S
332.676 776.318 m
350.454 794.096 l
S
0.00 0.00 0.00 1.00 k
348.838 795.174 m
353.148 796.790 l
351.532 792.480 l
348.838 795.174 l
f
378.468 766.083 m
388.703 766.083 l
398.939 766.083 l
S
439.882 766.083 m
449.578 766.083 l
459.814 766.083 l
S
236.246 725.140 m
236.246 740.763 l
S
297.121 725.140 m
297.121 740.763 l
S
357.996 725.140 m
357.996 740.763 l
S
0.250 w
231.849 718.676 m
231.849 722.917 l
232.424 722.917 l
234.652 719.587 l
234.652 722.917 l
235.190 722.917 l
235.190 718.676 l
234.615 718.676 l
232.387 722.008 l
232.387 718.676 l
231.849 718.676 l
f
235.445 716.521 m
235.445 719.220 l
235.802 719.220 l
235.802 717.881 l
237.142 719.220 l
237.626 719.220 l
236.494 718.126 l
237.676 716.521 l
237.205 716.521 l
236.244 717.887 l
235.802 717.456 l
235.802 716.521 l
235.445 716.521 l
f
239.088 716.521 m
238.757 716.521 l
238.757 718.632 l
238.677 718.556 238.572 718.480 238.443 718.404 c
238.313 718.328 238.197 718.271 238.094 718.233 c
238.094 718.553 l
238.279 718.640 238.441 718.746 238.580 718.870 c
238.719 718.994 238.817 719.114 238.875 719.231 c
239.088 719.231 l
239.088 716.521 l
f
293.263 718.676 m
293.263 722.917 l
293.838 722.917 l
296.066 719.587 l
296.066 722.917 l
296.604 722.917 l
296.604 718.676 l
296.029 718.676 l
293.801 722.008 l
293.801 718.676 l
293.263 718.676 l
f
296.859 716.521 m
296.859 719.220 l
297.216 719.220 l
297.216 717.881 l
298.556 719.220 l
299.040 719.220 l
297.908 718.126 l
299.090 716.521 l
298.619 716.521 l
297.658 717.887 l
297.216 717.456 l
297.216 716.521 l
296.859 716.521 l
f
300.996 716.839 m
300.996 716.521 l
299.212 716.521 l
299.209 716.600 299.222 716.677 299.250 716.751 c
299.296 716.872 299.368 716.992 299.468 717.110 c
299.568 717.227 299.713 717.364 299.902 717.518 c
300.195 717.759 300.394 717.949 300.497 718.090 c
300.600 718.231 300.651 718.363 300.651 718.489 c
300.651 718.620 300.604 718.731 300.510 718.821 c
300.417 718.911 300.294 718.956 300.143 718.956 c
299.984 718.956 299.856 718.908 299.760 718.813 c
299.665 718.717 299.616 718.584 299.615 718.415 c
299.274 718.450 l
299.298 718.704 299.385 718.898 299.537 719.031 c
299.690 719.164 299.894 719.231 300.151 719.231 c
300.410 719.231 300.615 719.159 300.766 719.015 c
300.916 718.872 300.992 718.694 300.992 718.481 c
300.992 718.373 300.970 718.267 300.926 718.163 c
300.881 718.058 300.808 717.949 300.706 717.833 c
300.603 717.718 300.433 717.559 300.195 717.358 c
299.996 717.191 299.868 717.078 299.812 717.019 c
299.755 716.959 299.709 716.899 299.672 716.839 c
300.996 716.839 l
f
354.138 718.676 m
354.138 722.917 l
354.713 722.917 l
356.941 719.587 l
356.941 722.917 l
357.479 722.917 l
357.479 718.676 l
356.904 718.676 l
354.676 722.008 l
354.676 718.676 l
354.138 718.676 l
f
357.734 716.521 m
357.734 719.220 l
358.091 719.220 l
358.091 717.881 l
359.431 719.220 l
359.915 719.220 l
358.783 718.126 l
359.965 716.521 l
359.494 716.521 l
358.533 717.887 l
358.091 717.456 l
358.091 716.521 l
357.734 716.521 l
f
360.131 717.233 m
360.462 717.277 l
360.500 717.089 360.565 716.954 360.656 716.871 c
360.748 716.788 360.859 716.747 360.991 716.747 c
361.146 716.747 361.278 716.801 361.385 716.909 c
361.493 717.017 361.547 717.151 361.547 717.310 c
361.547 717.462 361.497 717.588 361.397 717.687 c
361.298 717.786 361.172 717.835 361.018 717.835 c
360.956 717.835 360.878 717.823 360.784 717.798 c
360.821 718.089 l
360.843 718.087 360.861 718.085 360.875 718.085 c
361.016 718.085 361.143 718.122 361.256 718.196 c
361.369 718.269 361.425 718.383 361.425 718.536 c
361.425 718.658 361.384 718.759 361.302 718.838 c
361.220 718.918 361.113 718.958 360.983 718.958 c
360.854 718.958 360.747 718.918 360.661 718.837 c
360.575 718.756 360.520 718.634 360.495 718.472 c
360.164 718.531 l
360.204 718.753 360.297 718.925 360.440 719.047 c
360.584 719.169 360.762 719.231 360.976 719.231 c
361.123 719.231 361.259 719.199 361.383 719.136 c
361.507 719.073 361.602 718.986 361.667 718.877 c
361.733 718.768 361.766 718.652 361.766 718.529 c
361.766 718.413 361.734 718.306 361.672 718.211 c
361.609 718.115 361.517 718.039 361.394 717.982 c
361.553 717.945 361.677 717.869 361.766 717.753 c
361.854 717.637 361.898 717.492 361.898 717.318 c
361.898 717.082 361.812 716.882 361.641 716.718 c
361.469 716.555 361.251 716.473 360.989 716.473 c
360.752 716.473 360.555 716.543 360.399 716.684 c
360.242 716.825 360.153 717.008 360.131 717.233 c
f
0.750 w
204.461 766.083 m
205 767.160 l
206.077 767.160 l
206.616 766.083 l
206.077 765.005 l
205 765.005 l
204.461 766.083 l
b
0.250 w
132.820 768.708 m
133.381 768.708 l
133.381 766.257 l
133.381 765.831 133.333 765.493 133.236 765.242 c
133.140 764.991 132.966 764.787 132.714 764.630 c
132.462 764.473 132.132 764.394 131.723 764.394 c
131.326 764.394 131.001 764.463 130.748 764.600 c
130.496 764.736 130.315 764.935 130.207 765.194 c
130.099 765.453 130.045 765.808 130.045 766.257 c
130.045 768.708 l
130.606 768.708 l
130.606 766.260 l
130.606 765.892 130.641 765.620 130.709 765.446 c
130.778 765.271 130.895 765.137 131.062 765.042 c
131.229 764.948 131.433 764.900 131.674 764.900 c
132.087 764.900 132.381 764.994 132.556 765.181 c
132.732 765.368 132.820 765.728 132.820 766.260 c
132.820 768.708 l
f
133.378 762.312 m
134.092 763.328 l
133.432 764.267 l
133.846 764.267 l
134.146 763.808 l
134.202 763.721 134.248 763.648 134.282 763.589 c
134.336 763.670 134.386 763.742 134.431 763.805 c
134.761 764.267 l
135.157 764.267 l
134.481 763.346 l
135.208 762.312 l
134.801 762.312 l
134.400 762.919 l
134.293 763.083 l
133.779 762.312 l
133.378 762.312 l
f
132.820 707.294 m
133.381 707.294 l
133.381 704.843 l
133.381 704.417 133.333 704.079 133.236 703.828 c
133.140 703.577 132.966 703.373 132.714 703.216 c
132.462 703.059 132.132 702.980 131.723 702.980 c
131.326 702.980 131.001 703.049 130.748 703.186 c
130.496 703.322 130.315 703.521 130.207 703.780 c
130.099 704.039 130.045 704.394 130.045 704.843 c
130.045 707.294 l
130.606 707.294 l
130.606 704.846 l
130.606 704.478 130.641 704.206 130.709 704.032 c
130.778 703.857 130.895 703.723 131.062 703.628 c
131.229 703.534 131.433 703.486 131.674 703.486 c
132.087 703.486 132.381 703.580 132.556 703.767 c
132.732 703.954 132.820 704.314 132.820 704.846 c
132.820 707.294 l
f
133.378 701.437 m
134.092 702.453 l
133.432 703.392 l
133.846 703.392 l
134.146 702.933 l
134.202 702.846 134.248 702.773 134.282 702.714 c
134.336 702.795 134.386 702.867 134.431 702.930 c
134.761 703.392 l
135.157 703.392 l
134.481 702.471 l
135.208 701.437 l
134.801 701.437 l
134.400 702.044 l
134.293 702.208 l
133.779 701.437 l
133.378 701.437 l
f
*u
137.016 755.848 m
137.016 760.089 l
138.608 760.089 l
138.932 760.089 139.192 760.046 139.387 759.960 c
139.583 759.874 139.736 759.742 139.847 759.564 c
139.958 759.385 140.014 759.199 140.014 759.004 c
140.014 758.822 139.964 758.652 139.866 758.492 c
139.768 758.332 139.619 758.202 139.421 758.104 c
139.677 758.029 139.874 757.901 140.012 757.719 c
140.150 757.538 140.219 757.324 140.219 757.077 c
140.219 756.878 140.177 756.694 140.093 756.523 c
140.009 756.352 139.906 756.221 139.782 756.128 c
139.659 756.036 139.504 755.966 139.318 755.918 c
139.132 755.871 138.904 755.848 138.634 755.848 c
137.016 755.848 l
f
137.578 758.307 m
138.495 758.307 l
138.744 758.307 138.922 758.323 139.030 758.356 c
139.173 758.398 139.280 758.469 139.353 758.567 c
139.425 758.665 139.461 758.789 139.461 758.937 c
139.461 759.078 139.427 759.202 139.360 759.309 c
139.292 759.416 139.196 759.489 139.070 759.529 c
138.945 759.568 138.730 759.588 138.425 759.588 c
137.578 759.588 l
137.578 758.307 l
f
137.578 756.348 m
138.634 756.348 l
138.815 756.348 138.942 756.355 139.016 756.368 c
139.145 756.391 139.253 756.430 139.340 756.484 c
139.426 756.538 139.498 756.617 139.554 756.720 c
139.610 756.823 139.638 756.942 139.638 757.077 c
139.638 757.235 139.597 757.373 139.516 757.489 c
139.435 757.606 139.323 757.688 139.179 757.735 c
139.035 757.782 138.828 757.806 138.558 757.806 c
137.578 757.806 l
137.578 756.348 l
f
*U
140.578 755.848 m
141.700 757.444 l
140.662 758.920 l
141.313 758.920 l
141.784 758.200 l
141.873 758.063 141.944 757.948 141.998 757.855 c
142.083 757.983 142.161 758.095 142.233 758.194 c
142.751 758.920 l
143.373 758.920 l
142.311 757.473 l
143.454 755.848 l
142.814 755.848 l
142.184 756.802 l
142.016 757.060 l
141.209 755.848 l
140.578 755.848 l
f
144.036 755.848 m
144.036 756.441 l
144.629 756.441 l
144.629 755.848 l
144.036 755.848 l
f
147.351 755.848 m
146.830 755.848 l
146.830 759.166 l
146.705 759.046 146.540 758.927 146.337 758.807 c
146.133 758.688 145.951 758.598 145.789 758.538 c
145.789 759.041 l
146.080 759.178 146.334 759.344 146.552 759.539 c
146.770 759.734 146.925 759.923 147.015 760.106 c
147.351 760.106 l
147.351 755.848 l
f
*u
137.016 694.434 m
137.016 698.675 l
138.608 698.675 l
138.932 698.675 139.192 698.632 139.387 698.546 c
139.583 698.460 139.736 698.328 139.847 698.150 c
139.958 697.971 140.014 697.785 140.014 697.590 c
140.014 697.408 139.964 697.238 139.866 697.078 c
139.768 696.918 139.619 696.788 139.421 696.690 c
139.677 696.615 139.874 696.487 140.012 696.305 c
140.150 696.124 140.219 695.910 140.219 695.663 c
140.219 695.464 140.177 695.280 140.093 695.109 c
140.009 694.938 139.906 694.807 139.782 694.714 c
139.659 694.622 139.504 694.552 139.318 694.504 c
139.132 694.457 138.904 694.434 138.634 694.434 c
137.016 694.434 l
f
137.578 696.893 m
138.495 696.893 l
138.744 696.893 138.922 696.909 139.030 696.942 c
139.173 696.984 139.280 697.055 139.353 697.153 c
139.425 697.251 139.461 697.375 139.461 697.523 c
139.461 697.664 139.427 697.788 139.360 697.895 c
139.292 698.002 139.196 698.075 139.070 698.115 c
138.945 698.154 138.730 698.174 138.425 698.174 c
137.578 698.174 l
137.578 696.893 l
f
137.578 694.934 m
138.634 694.934 l
138.815 694.934 138.942 694.941 139.016 694.954 c
139.145 694.977 139.253 695.016 139.340 695.070 c
139.426 695.124 139.498 695.203 139.554 695.306 c
139.610 695.409 139.638 695.528 139.638 695.663 c
139.638 695.821 139.597 695.959 139.516 696.075 c
139.435 696.192 139.323 696.274 139.179 696.321 c
139.035 696.368 138.828 696.392 138.558 696.392 c
137.578 696.392 l
137.578 694.934 l
f
*U
140.578 694.434 m
141.700 696.030 l
140.662 697.506 l
141.313 697.506 l
141.784 696.786 l
141.873 696.649 141.944 696.534 141.998 696.441 c
142.083 696.569 142.161 696.681 142.233 696.780 c
142.751 697.506 l
143.373 697.506 l
142.311 696.059 l
143.454 694.434 l
142.814 694.434 l
142.184 695.388 l
142.016 695.646 l
141.209 694.434 l
140.578 694.434 l
f
144.036 694.434 m
144.036 695.027 l
144.629 695.027 l
144.629 694.434 l
144.036 694.434 l
f
148.126 694.934 m
148.126 694.434 l
145.323 694.434 l
145.319 694.559 145.339 694.679 145.384 694.795 c
145.455 694.986 145.569 695.174 145.726 695.359 c
145.884 695.544 146.111 695.759 146.408 696.002 c
146.869 696.380 147.180 696.679 147.342 696.900 c
147.504 697.121 147.585 697.329 147.585 697.526 c
147.585 697.733 147.511 697.907 147.364 698.048 c
147.216 698.190 147.024 698.261 146.787 698.261 c
146.536 698.261 146.335 698.186 146.185 698.035 c
146.035 697.885 145.958 697.677 145.956 697.410 c
145.421 697.465 l
145.458 697.865 145.596 698.169 145.835 698.378 c
146.074 698.587 146.395 698.692 146.798 698.692 c
147.205 698.692 147.527 698.579 147.765 698.354 c
148.002 698.128 148.120 697.848 148.120 697.515 c
148.120 697.345 148.086 697.178 148.016 697.014 c
147.947 696.850 147.832 696.678 147.671 696.496 c
147.510 696.315 147.242 696.066 146.868 695.750 c
146.555 695.488 146.355 695.310 146.266 695.216 c
146.177 695.123 146.104 695.028 146.046 694.934 c
148.126 694.934 l
f
0.750 w
500.757 766.083 m
515.841 766.083 l
S
0.250 w
521.141 764.467 m
521.141 768.708 l
521.716 768.708 l
523.944 765.378 l
523.944 768.708 l
524.482 768.708 l
524.482 764.467 l
523.907 764.467 l
521.679 767.799 l
521.679 764.467 l
521.141 764.467 l
f
524.477 762.312 m
525.521 763.718 l
524.600 765.011 l
525.026 765.011 l
525.515 764.318 l
525.617 764.175 525.690 764.064 525.733 763.987 c
525.793 764.085 525.864 764.188 525.946 764.294 c
526.489 765.011 l
526.878 765.011 l
525.930 763.738 l
526.951 762.312 l
526.510 762.312 l
525.830 763.274 l
525.792 763.330 525.753 763.390 525.712 763.455 c
525.652 763.357 525.609 763.289 525.584 763.252 c
524.906 762.312 l
524.477 762.312 l
f
232.503 805.880 m
233.070 805.880 l
234.453 803.282 l
235.663 805.880 l
236.221 805.880 l
234.630 802.582 l
234.431 802.169 234.268 801.899 234.141 801.772 c
234.014 801.644 233.831 801.581 233.594 801.581 c
233.449 801.581 233.272 801.614 233.062 801.682 c
233.062 802.162 l
233.212 802.075 233.371 802.032 233.539 802.032 c
233.676 802.032 233.794 802.076 233.894 802.164 c
233.993 802.251 234.102 802.451 234.222 802.764 c
232.503 805.880 l
f
238.446 801.639 m
237.925 801.639 l
237.925 804.957 l
237.800 804.837 237.635 804.718 237.432 804.598 c
237.228 804.479 237.046 804.389 236.884 804.329 c
236.884 804.832 l
237.175 804.969 237.429 805.135 237.647 805.330 c
237.865 805.525 238.020 805.714 238.110 805.897 c
238.446 805.897 l
238.446 801.639 l
f
293.378 805.880 m
293.945 805.880 l
295.328 803.282 l
296.538 805.880 l
297.096 805.880 l
295.505 802.582 l
295.306 802.169 295.143 801.899 295.016 801.772 c
294.889 801.644 294.706 801.581 294.469 801.581 c
294.324 801.581 294.147 801.614 293.937 801.682 c
293.937 802.162 l
294.087 802.075 294.246 802.032 294.414 802.032 c
294.551 802.032 294.669 802.076 294.769 802.164 c
294.868 802.251 294.977 802.451 295.097 802.764 c
293.378 805.880 l
f
300.096 802.139 m
300.096 801.639 l
297.293 801.639 l
297.289 801.764 297.309 801.884 297.354 802 c
297.425 802.191 297.539 802.379 297.696 802.564 c
297.854 802.749 298.081 802.964 298.378 803.207 c
298.839 803.585 299.150 803.884 299.312 804.105 c
299.474 804.326 299.555 804.534 299.555 804.731 c
299.555 804.938 299.481 805.112 299.334 805.253 c
299.186 805.395 298.994 805.466 298.757 805.466 c
298.506 805.466 298.305 805.391 298.155 805.240 c
298.005 805.090 297.928 804.882 297.926 804.615 c
297.391 804.670 l
297.428 805.070 297.566 805.374 297.805 805.583 c
298.044 805.792 298.365 805.897 298.768 805.897 c
299.175 805.897 299.497 805.784 299.735 805.559 c
299.972 805.333 300.090 805.053 300.090 804.720 c
300.090 804.550 300.056 804.383 299.986 804.219 c
299.917 804.055 299.802 803.883 299.641 803.701 c
299.480 803.520 299.212 803.271 298.838 802.955 c
298.525 802.693 298.325 802.515 298.236 802.421 c
298.147 802.328 298.074 802.233 298.016 802.139 c
300.096 802.139 l
f
354.792 805.880 m
355.359 805.880 l
356.742 803.282 l
357.952 805.880 l
358.510 805.880 l
356.919 802.582 l
356.720 802.169 356.557 801.899 356.430 801.772 c
356.303 801.644 356.120 801.581 355.883 801.581 c
355.738 801.581 355.561 801.614 355.351 801.682 c
355.351 802.162 l
355.501 802.075 355.660 802.032 355.828 802.032 c
355.965 802.032 356.083 802.076 356.183 802.164 c
356.282 802.251 356.391 802.451 356.511 802.764 c
354.792 805.880 l
f
358.776 802.758 m
359.297 802.828 l
359.357 802.532 359.459 802.320 359.602 802.190 c
359.746 802.059 359.921 801.994 360.127 801.994 c
360.372 801.994 360.579 802.079 360.748 802.249 c
360.917 802.419 361.001 802.629 361.001 802.880 c
361.001 803.119 360.923 803.316 360.767 803.471 c
360.611 803.626 360.412 803.704 360.171 803.704 c
360.072 803.704 359.950 803.685 359.803 803.646 c
359.861 804.103 l
359.896 804.099 359.924 804.098 359.945 804.098 c
360.167 804.098 360.367 804.155 360.544 804.271 c
360.721 804.387 360.810 804.565 360.810 804.806 c
360.810 804.997 360.745 805.155 360.616 805.281 c
360.487 805.406 360.320 805.469 360.116 805.469 c
359.913 805.469 359.744 805.405 359.609 805.278 c
359.475 805.151 359.388 804.960 359.349 804.705 c
358.828 804.798 l
358.892 805.147 359.037 805.417 359.262 805.609 c
359.488 805.801 359.769 805.897 360.104 805.897 c
360.336 805.897 360.549 805.847 360.744 805.748 c
360.938 805.649 361.087 805.513 361.191 805.342 c
361.294 805.170 361.345 804.988 361.345 804.795 c
361.345 804.612 361.296 804.445 361.198 804.294 c
361.099 804.144 360.954 804.024 360.761 803.936 c
361.012 803.878 361.206 803.758 361.345 803.575 c
361.484 803.393 361.554 803.165 361.554 802.891 c
361.554 802.521 361.419 802.207 361.149 801.949 c
360.879 801.692 360.537 801.563 360.124 801.563 c
359.752 801.563 359.443 801.674 359.197 801.896 c
358.951 802.118 358.811 802.405 358.776 802.758 c
f
*u
171.902 800.492 m
174.483 800.492 l
174.483 796.751 l
174.865 796.751 l
174.865 795.261 l
174.364 795.261 l
174.364 796.251 l
171.561 796.251 l
171.561 795.261 l
171.061 795.261 l
171.061 796.751 l
171.390 796.751 l
171.732 797.266 171.902 798.306 171.902 799.873 c
171.902 800.492 l
f
173.922 799.991 m
172.443 799.991 l
172.443 799.774 l
172.443 799.414 172.411 798.920 172.346 798.294 c
172.282 797.669 172.155 797.154 171.966 796.751 c
173.922 796.751 l
173.922 799.991 l
f
*U
175.548 796.251 m
175.548 800.492 l
176.109 800.492 l
176.109 798.750 l
178.314 798.750 l
178.314 800.492 l
178.875 800.492 l
178.875 796.251 l
178.314 796.251 l
178.314 798.250 l
176.109 798.250 l
176.109 796.251 l
175.548 796.251 l
f
174.217 738.001 m
177.553 738.001 l
177.553 733.760 l
176.989 733.760 l
176.989 737.500 l
174.779 737.500 l
174.779 733.760 l
174.217 733.760 l
174.217 738.001 l
f
*u
418.097 794.028 m
420.678 794.028 l
420.678 790.287 l
421.060 790.287 l
421.060 788.797 l
420.559 788.797 l
420.559 789.787 l
417.756 789.787 l
417.756 788.797 l
417.256 788.797 l
417.256 790.287 l
417.585 790.287 l
417.927 790.802 418.097 791.842 418.097 793.409 c
418.097 794.028 l
f
420.117 793.527 m
418.638 793.527 l
418.638 793.310 l
418.638 792.950 418.606 792.456 418.541 791.830 c
418.477 791.205 418.350 790.690 418.161 790.287 c
420.117 790.287 l
420.117 793.527 l
f
*U
*u
475.429 794.635 m
477.058 798.876 l
477.662 798.876 l
479.398 794.635 l
478.759 794.635 l
478.264 795.919 l
476.491 795.919 l
476.025 794.635 l
475.429 794.635 l
f
476.653 796.376 m
478.090 796.376 l
477.648 797.551 l
477.513 797.907 477.412 798.201 477.347 798.430 c
477.293 798.158 477.217 797.888 477.118 797.620 c
476.653 796.376 l
f
*U
479.850 798.876 m
480.411 798.876 l
480.411 795.135 l
482.621 795.135 l
482.621 798.876 l
483.185 798.876 l
483.185 795.135 l
483.573 795.135 l
483.573 793.457 l
483.075 793.457 l
483.075 794.635 l
479.850 794.635 l
479.850 798.876 l
f
484.235 798.876 m
487.571 798.876 l
487.571 794.635 l
487.007 794.635 l
487.007 798.375 l
484.797 798.375 l
484.797 794.635 l
484.235 794.635 l
484.235 798.876 l
f
end restore
%%PageTrailer
showpage
%%Trailer
%%EOF
